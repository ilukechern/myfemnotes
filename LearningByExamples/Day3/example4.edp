int nn = 3200;

int[int] ls = [1, 1, 1, 1, 1, 1];
mesh Th = square(nn, nn, label=ls);

if(mpirank == 0)
{
    cout << Th.nt << endl;
}

include "macro_ddm.idp"

DmeshCreate(Th);

cout <<"rank {" + mpirank + "} has " + Th.nt << " elements" << endl;

// plotDmesh(Th, cmm="Distributed mesh");

fespace Vh(Th, P1);

func f = 1.0;
varf vPoisson(u, v) = 
                        int2d(Th) (dx(u)*dx(v) + dy(u)*dy(v))
                    +   int2d(Th)(f*v)
                    +   on(1, u = 0)
                    ;

load "PETSc"
Mat A;
MatCreate(Th, A, P1);

A = vPoisson(Vh, Vh);
real[int] rhs = vPoisson(0, Vh);

Vh sol;
set(A, sparams = "-pc_type hypre -ksp_monitor");
// set(A, sparams = "-pc_type hpddm -pc_hpddm_levels_1_eps_nev 20 -pc_hpddm_levels_1_sub_pc_type lu -pc_hpddm_define_subdomains -pc_hpddm_has_neumann -pc_hpddm_coarse_p 2 -ksp_monitor");
sol[] = A^-1 * rhs;
// plotD(Th, sol, cmm="disp");

int[int] fforder = [1];
savevtk("./output/poisson.vtu", Th, sol, dataname="u", order=fforder);

